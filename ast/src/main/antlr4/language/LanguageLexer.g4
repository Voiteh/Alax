lexer grammar LanguageLexer;

SHARED:'shared';
PROTECTED:'protected';
VALUE: 'value' SKIP_WS -> pushMode(Spacefull) ;
IMPORT:'import';
ALIAS: 'alias';
AS: 'as'  ;
THIS :'this'  ;
SUPER:'super' ;
OUTER:'outer';
RETURN: 'return' ;
PACKAGE: 'package'  SKIP_WS -> pushMode(Spaceless) ;
MODULE: 'module'  SKIP_WS -> pushMode(Spaceless) ;

fragment TRUE: 'true';
fragment FALSE: 'false';


NOT_FAT_ARROW: '=!>';
FAT_ARROW: '=>';
QUOTE :'"';
APOSTROPHE: '\'';
DOT:'.';
SEMI_COLON: ';';
COLON: ':';
COMMA: ',';
OPEN_CURLY: '{';
CLOSE_CURLY: '}';
OPEN_SQUARE: '[';
CLOSE_SQUARE: ']';
OPEN_TRIANGLE: '<';
CLOSE_TRIANGLE: '>';
OPEN_BRACKET: '(';
CLOSE_BRACKET: ')';
MINUS: '-';
PLUS: '+';
AND: '&';
PIPE: '|';
UNDERSCORE: '_';
EQUALS : '=';

//TODO include UTF-? literals
fragment CHARACTER: LOWERCASE_LETTER|UPPERCASE_LETTER|DIGIT|UNDERSCORE;
fragment DIGITS : DIGIT+;
fragment DIGIT: [0-9];
fragment UPPERCASE_LETTER:[A-Z];
fragment LOWERCASE_LETTER:[a-z];
fragment SYMBOL : LOWERCASE_LETTER|UPPERCASE_LETTER|DIGIT|UNDERSCORE;
fragment UPPERCASE_IDENTIFIER_PART: UPPERCASE_LETTER SYMBOL* ;
fragment LOWERCASE_IDENTIFIER_PART: LOWERCASE_LETTER SYMBOL* ;
fragment UPPERCASE_NAME_PART: UPPERCASE_LETTER LOWERCASE_LETTER*;
fragment LOWERCASE_NAME_PART: LOWERCASE_LETTER LOWERCASE_LETTER*;

BOOLEAN_LITERAL : TRUE|FALSE;
STRING_LITERAL: QUOTE CHARACTER* QUOTE;
CHARACTER_LITERAL: APOSTROPHE CHARACTER APOSTROPHE;
FLOAT_LITERAL: MINUS? DIGITS DOT DIGITS;
INTEGER_LITERAL: MINUS? DIGITS;

SKIP_WS : [ \t\r\n]+ -> skip ;

mode Spacefull;

UPPERCASE_IDENTIFIER: UPPERCASE_IDENTIFIER_PART (WS UPPERCASE_IDENTIFIER_PART)* ;
LOWERCASE_IDENTIFIER: LOWERCASE_IDENTIFIER_PART (WS LOWERCASE_IDENTIFIER_PART)* -> popMode;
WS : [ \t\r\n]+  ;

mode Spaceless;

UPPERCASE_NAME: UPPERCASE_NAME_PART  -> popMode;
QUALIFIED_UPPERCASE_NAME: UPPERCASE_NAME_PART (DOT UPPERCASE_NAME_PART)* ->popMode;
LOWERCASE_NAME: LOWERCASE_NAME_PART  -> popMode;
QUALIFIED_LOWERCASE_NAME: LOWERCASE_NAME_PART (DOT LOWERCASE_NAME_PART)* ->popMode;


